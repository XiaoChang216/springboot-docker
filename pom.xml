<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.1.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>me.ccitboy</groupId>
	<artifactId>docker</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>docker</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.2.0</version>
				<executions>
					<!--执行 mvn package 时自动执行 mvn docker:build 就会打包镜像-->
					<execution>
						<id>build-image</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!--docker主机ip-->
					<dockerHost>http://192.168.66.131:2375</dockerHost>
					<!--docker镜像名-->
					<imageName>javaboy/${project.artifactId}</imageName>
					<!--docker镜像tags-->
					<imageTags>
						<imageTag>${project.version}</imageTag>
					</imageTags>
					<!--如果你想强制docker在每次新的构建上覆盖镜像tags 就加forceTags-->
					<forceTags>true</forceTags>
					<!--DockerFile位置 ， 就是根节点的下级节点-->
					<dockerDirectory>${project.basedir}</dockerDirectory>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<!--用于指定需要复制的根目录，${project.build.directory} target目录 -->
							<directory>${project.build.directory}</directory>
							<!--用于指定需要复制的文件 .jar指的是打包后的jar包文件-->
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
